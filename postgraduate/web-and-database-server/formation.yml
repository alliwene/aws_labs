AWSTemplateFormatVersion: 2010-09-09
Description: Set up web server and rds instance 

# Lab VPC with public subnet, private subnet and Internet Gateway

Parameters:
  
  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2

  # dbUsername:
  #   Description: database instance password
  #   Type: AWS::SSM::Parameter::Value<String>
  #   NoEcho: true 

Resources:

###########
# VPC with Internet Gateway
########### 

  LabVPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    DependsOn: LabVPC1 
    Properties:
      Tags:
        - Key: Name
          Value: Lab IGW

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref LabVPC1

###########
# Public Route Table
###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVPC1
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCtoIGWConnection
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable 

###########
# Public Subnet
###########

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC1
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Public Subnet

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

###########
# NAT
###########

 
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: Name
        Value: nat 

  ElasticIPAddress: 
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc 
  
  
###########
# Private Route Table
###########

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref LabVPC1
      Tags:
        - Key: Name
          Value: Private Route Table 

  PrivateRoute:
    Type: AWS::EC2::Route 
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NATGateway

###########
# Private Subnet
###########

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC1
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref LabVPC1
      MapPublicIpOnLaunch: false
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region' 
      Tags:
        - Key: Name
          Value: Private Subnet 2 
    
  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

###########
# Security Groups
###########

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: App
      GroupDescription: Enable access to web and ssh 
      VpcId: !Ref LabVPC1
      SecurityGroupIngress:
        - Description: Allow ssh access 
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - Description: Allow http access from anywhere 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: web-ssh

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MySQL
      GroupDescription: Enable access to MySQL 
      VpcId: !Ref LabVPC1
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: private

  PrivateInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow traffic from database port 
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref PublicSecurityGroup 
      GroupId: !Ref PrivateSecurityGroup 

###########
# Database subnet group
###########

  dbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: db subnet group in two private subnets
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: dbsubnet 

##########
# database instance
##########

  rdsDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: tutorial-db-instance
      DBSubnetGroupName: !Ref dbSubnetGroup
      DBName: sample
      Engine: mysql
      MasterUsername: tutorial_user
      MasterUserPassword: '{{resolve:ssm-secure:dbPassword:1}}'
      Port: 3306 
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref PrivateSecurityGroup
      StorageEncrypted: true 
      DeletionProtection: true 
      Tags:
        - Key: Name
          Value: dbinstance 

##########
# EC2
##########

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmazonLinuxAMIID
      KeyName: mykey
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      Tags:
        - Key: Name
          Value: tutorial-web-server
      UserData: 
        Fn::Base64: |
          #!/bin/bash 
          yum update -y 
          yum install -y httpd24 php72 php72-mysqlnd  
          service httpd start 
          chkconfig httpd on
          groupadd www
          usermod -a -G www ec2-user
          chgrp -R www /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} +
          find /var/www -type f -exec chmod 0664 {} +


###########
# Outputs
###########

# Outputs:

#   LabVPCDefaultSecurityGroup:
#     Value: !Sub ${LabVPC1.DefaultSecurityGroup}
