AWSTemplateFormatVersion: 2010-09-09
Description: VPC with 2 public subnets and 2 private subnets, EC2 in public subnet to host employee directory app. 
            Add S3 bucket and Dynamo DB table to store employee data. Add application load balancer and auto scaling groups.

Parameters: 
  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources: 
# VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: app-vpc

# Internet Gateway 
  igwApp:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: app-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref igwApp 

# Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref myVPC
      MapPublicIpOnLaunch: true 
      CidrBlock: 10.1.1.0/24
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref myVPC
      MapPublicIpOnLaunch: true 
      CidrBlock: 10.1.2.0/24
      Tags:
        - Key: Name
          Value: Public Subnet 2

# Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref myVPC
      CidrBlock: 10.1.3.0/24
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref myVPC
      CidrBlock: 10.1.4.0/24
      Tags:
        - Key: Name
          Value: Private Subnet 2

# Public route table, route and route table association
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: app-routetable-public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref igwApp 

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

# Private route table and route table association
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: app-routetable-private

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

# S3 bucket
  s3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: employee-photo-bucket-aua-009
      Tags:
        - Key: Name
          Value: app-bucket

  s3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3Bucket
      PolicyDocument: 
        Statement:
          - 
            Sid: AllowS3ReadAccess
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/S3DynamoDBFullAccessRole
            Action: s3:*
            Resource:
              - !Sub arn:aws:s3:::${s3Bucket}
              - !Sub arn:aws:s3:::${s3Bucket}/*

# Security group and EC2 in public subnet 
  appSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow http and https access
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - Description: allow http access
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - Description: allow https access 
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0 
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: web-security-group 
    
  iamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - S3DynamoDBFullAccessRole 
    

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: app-key-pair
      ImageId: !Ref AmazonLinuxAMIID
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1 
      SecurityGroupIds: 
        - !Ref appSecurityGroup
      IamInstanceProfile: !Ref iamInstanceProfile 
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          wget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/DEV-AWS-MO-GCNv2/FlaskApp.zip
          unzip FlaskApp.zip
          cd FlaskApp/
          yum -y install python3 mysql
          pip3 install -r requirements.txt
          amazon-linux-extras install epel
          yum -y install stress
          export PHOTOS_BUCKET=${s3Bucket}
          export AWS_DEFAULT_REGION=${AWS::Region}
          export DYNAMO_MODE=on
          FLASK_APP=application.py /usr/local/bin/flask run --host=0.0.0.0 --port=80
      Tags:
        - Key: Name
          Value: employee-directory-app 

# DynamoDB
  dynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: id 
          AttributeType: S 
      KeySchema:
        - 
          AttributeName: id 
          KeyType: HASH
      BillingMode: PROVISIONED 
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5 
      TableName: Employees
      Tags:
        - Key: Name
          Value: app-dynamo-db 

# elb target group
  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 40
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      Name: app-target-group
      Targets: 
        - Id: !Ref EC2Instance
          Port: 80
      TargetType: instance 
      VpcId: !Ref myVPC  

# elb security group 
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow http access for load balancer
      VpcId: !Ref myVPC 
      SecurityGroupIngress:
        - Description: allow http access 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: load-balancer-sg

# elb listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP


# elb
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Name: app-elb
      Type: application 

 # launch template 
  launchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: app-launch-template
      LaunchTemplateData: 
        KeyName: app-key-pair
        ImageId: !Ref AmazonLinuxAMIID
        InstanceType: t2.micro
        IamInstanceProfile: 
          Name: !Ref iamInstanceProfile 
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref appSecurityGroup 
            DeleteOnTermination: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -ex
            wget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/DEV-AWS-MO-GCNv2/FlaskApp.zip
            unzip FlaskApp.zip
            cd FlaskApp/
            yum -y install python3 mysql
            pip3 install -r requirements.txt
            amazon-linux-extras install epel
            yum -y install stress
            export PHOTOS_BUCKET=${s3Bucket}
            export AWS_DEFAULT_REGION=${AWS::Region}
            export DYNAMO_MODE=on
            FLASK_APP=application.py /usr/local/bin/flask run --host=0.0.0.0 --port=80
      TagSpecifications:
        - ResourceType: launch-template 
          Tags:
            - Key: Description
              Value: A web server for the employee directory application 

# SNS topic and subsription 
  snsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription: 
        - Endpoint: allisonabiodun@gmail.com
          Protocol: email
      TopicName: app-sns-topic 

# auto scaling group 
  asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: app-asg
      LaunchTemplate:
       LaunchTemplateId: !Ref launchTemplate
       Version: !GetAtt launchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
       - !Ref PublicSubnet1
       - !Ref PublicSubnet2 
      TargetGroupARNs:
        - !Ref ELBTargetGroup
      HealthCheckType: ELB 
      HealthCheckGracePeriod: 300
      DesiredCapacity: "2"
      MinSize: "2"
      MaxSize: "4"
      NotificationConfigurations:
        - TopicARN: !Ref snsTopic
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
      Tags:
        - Key: Environment
          Value: Test 
          PropagateAtLaunch: true 

# auto scaling policy 
  asgTargetPolicy:
   Type: AWS::AutoScaling::ScalingPolicy
   Properties:
     AutoScalingGroupName: !Ref asg
     PolicyType: TargetTrackingScaling
     TargetTrackingConfiguration:
       PredefinedMetricSpecification:
         PredefinedMetricType: ASGAverageCPUUtilization
       TargetValue: 60.0

  



