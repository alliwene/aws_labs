aws iam list-policies --scope Local --query 'Policies[0].Arn'
aws iam get-policy --policy-arn arn:aws:iam::159757251122:policy/lab_policy
aws iam get-policy-version --policy-arn arn:aws:iam::159757251122:policy/lab_policy --version-id v1 > lab_policy.json 
aws iam list-policies --only-attached 




# list all policies
aws iam list-policies

# filter result to list only the customer managed policies
aws iam list-policies --scope Local

# Get Arn and version id from filtered result 
alias Arn="aws iam list-policies --scope Local --query 'Policies[0].Arn'"
alias VersionId="aws iam list-policies --scope Local --query 'Policies[0].DefaultVersionId'"

# Remove quotes from Arnd and VersionId
alias NewId='VersionId | tr -d \"'
alias NewArn='Arn | tr -d \"'

# Use results to download policy document for lab_policy  
aws iam get-policy-version --policy-arn $(NewArn) --version-id $(NewId)

# Save document to lab_policy.json
aws iam get-policy-version --policy-arn $(NewArn) --version-id $(NewId) > lab_policy.json 

# confirm if lab_policy.json exits and view its content
ls
cat lab_policy.json 



# list all policies
all_policies = $(aws iam list--policies)



AKIAY2ZMX6HWWT6B4RXX
4rmOxNv0davF9GZ0d8G0vKBZztJhcMSWyxwSeyz1

aws iam create-login-profile --user-name awsS3user --password Training123!

607294845421

arn:aws:iam::aws:policy/AmazonS3FullAccess

aws iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --user-name awsS3user

uallison256

aws s3 website s3://uallison256/ --index-document index.html

aws s3 cp /home/ec2-user/sysops-activity-files/static-website/ s3://uallison256/ --recursive --acl public-read 

aws s3 sync /home/ec2-user/sysops-activity-files/static-website/ s3://uallison256/ --acl public-read 

aws iam create-user --user-name aswsS3user 








## EC2 Lab

34.217.91.133

# Set the Region
AZ=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
export AWS_DEFAULT_REGION=${AZ::-1}

# Obtain latest Linux AMI
AMI=$(aws ssm get-parameters --names /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 --query 'Parameters[0].[Value]' --output text)
echo $AMI

SUBNET=$(aws ec2 describe-subnets --filters 'Name=tag:Name,Values=Public Subnet' --query Subnets[].SubnetId --output text)

SG=$(aws ec2 describe-security-groups --filters Name=group-name, Values=WebSecurityGroup --query SecurityGroups[].GroupId --output text)

wget https://aws-tc-largeobjects.s3.amazonaws.com/CUR-TF-100-RESTRT-1/171-lab-%5BJAWS%5D-create-ec2/UserData.txt

INSTANCE=$(\
aws ec2 run-instances \
--image-id $AMI \
--subnet-id $SUBNET \
--security-group-ids $SG \
--user-data file:///home/ec2-user/UserData.txt \
--instance-type t3.micro \
--tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Web Server}]' \
--query 'Instances[*].InstanceId' \
--output text \
)

aws ec2 describe-instances --instance-ids $INSTANCE


aws ec2 describe-instances --instance-ids $INSTANCE --query 'Reservations[].Instances[].State.Name' --output text

aws ec2 describe-instances --instance-ids $INSTANCE --query Reservations[].Instances[].PublicDnsName --output text

aws ec2 attach-internet-gateway --vpc-id "vpc-0eab502aec2b2f872" --internet-gateway-id "igw-093b81947f8e263d2" --region us-west-2


#!/bin/bash
# Install Apache Web Server
yum update -y
yum install -y httpd

# Turn on web server
systemctl enable httpd.service
systemctl start  httpd.service


systemctl status httpd.service

sudo chown -R /var/www/html/
sudo chown -R apache:apache /var/www/html/ 


sudo chown -R ec2-user /var/www/html/ 


# dynamic website activity 
cd ~/sysops-activity-files/starters
--key-name $key \

scp -i labsuser.pem -r ec2-user@54.69.69.77:/home/ec2-user/sysops-activity-files/starters /home/alli/Downloads

http://34.219.36.133/cafe/


sudo yum install -y nmap

nmap -Pn <public-ip> 


## Using Auto Scaling in AWS (Linux)

curl http://169.254.169.254/latest/dynamic/instance-identity/document | grep region

aws ec2 run-instances --key-name vockey --instance-type t3.micro --image-id ami-0e5b6b6a9f3db6db8 --user-data file:///home/ec2-user/UserData.txt --security-group-ids sg-05ae866561802023b --subnet-id subnet-09f3fd15163b52151 --associate-public-ip-address --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=WebServerBaseImage}]' --output text --query 'Instances[*].InstanceId'

aws ec2 wait instance-running --instance-ids i-09071ae814fdfd08c

# create AMI
aws ec2 create-image --name WebServer --instance-id i-09071ae814fdfd08c



AMIID	ami-0e5b6b6a9f3db6db8
HTTPACCESS	sg-05ae866561802023b
COMMANDHOSTIP	34.212.201.83
KEYNAME	vockey
SUBNETID	subnet-09f3fd15163b52151
			i-09071ae814fdfd08c
			ec2-54-149-131-90.us-west-2.compute.amazonaws.com
			"ImageId": "ami-0264d6f835573b3dd"
			





