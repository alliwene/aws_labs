AWSTemplateFormatVersion: 2010-09-09
Description: Lab template

# Lab VPC with public subnet, private subnet and Internet Gateway

Parameters:

  LabVpcCidr:
    Type: String
    Default: 10.0.0.0/20

  PublicSubnetCidr:
    Type: String
    Default: 10.0.0.0/24
    
  PrivateSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
    
  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:

###########
# VPC with Internet Gateway
###########

  LabVPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref LabVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Lab IGW

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - LabVPC1
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref LabVPC1

###########
# Public Route Table
###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: LabVPC1
    Properties:
      VpcId: !Ref LabVPC1
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - IGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

###########
# Public Subnet
###########

  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: LabVPC1
    Properties:
      VpcId: !Ref LabVPC1
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  
###########
# Private Route Table
###########

  # PrivateRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   DependsOn: LabVPC1
  #   Properties:
  #     VpcId: !Ref LabVPC1
  #     Tags:
  #       - Key: Name
  #         Value: Private Route Table

  # PrivateRoute:
  #   Type: AWS::EC2::Route 
  #   DependsOn:
  #     - PrivateRouteTable
  #   Properties:
  #     DestinationCidrBlock: 10.0.0.0/20
  #     RouteTableId: !Ref PrivateRouteTable

###########
# Private Subnet
###########

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: LabVPC1
    Properties:
      VpcId: !Ref LabVPC1
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet

  # PrivateRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   DependsOn:
  #     - PrivateRouteTable
  #     - PrivateSubnet
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     SubnetId: !Ref PrivateSubnet

###########
# App Security Group
###########

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: LabVPC1
    Properties:
      GroupName: App
      GroupDescription: Enable access to App
      VpcId: !Ref LabVPC1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: App

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmazonLinuxAMIID
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: App Server

###########
# Outputs
###########

Outputs:

  LabVPCDefaultSecurityGroup:
    Value: !Sub ${LabVPC1.DefaultSecurityGroup}
